{"version":3,"sources":["useInterval.js","useResizeObserver.js","racingchart2.js","App.js","reportWebVitals.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useResizeObserver","ref","useState","dimensions","setDimensions","observeTarget","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","Racingchart2","data","mstime","svgRef","wrapperRef","svg","select","sort","a","b","timeline","cases","moment","format","yScale","scaleBand","paddingInner","domain","map","value","index","range","xScale","scaleLinear","max","width","selectAll","country","join","enter","append","attr","bandwidth","transition","text","style","marginBottom","App","start","setStart","setMsTime","day","casesData","setCasesData","axios","get","then","res","catch","err","console","log","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAsBeA,MApBf,SAAqBC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,K,iCCCSQ,EAjBW,SAAAC,GACxB,MAAoCC,mBAAS,MAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OAZAT,qBAAU,WACR,IAAMU,EAAgBJ,EAAIL,QACpBU,EAAiB,IAAIC,KAAe,SAAAC,GACxCA,EAAQC,SAAQ,SAAAC,GACdN,EAAcM,EAAMC,mBAIxB,OADAL,EAAeM,QAAQP,GAChB,WACLC,EAAeO,UAAUR,MAE1B,CAACJ,IACGE,G,uBCiEMW,MA7Ef,YAAyC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACtBC,EAASvB,mBACTwB,EAAaxB,mBACbS,EAAaH,EAAkBkB,GAmErC,OAjEAvB,qBAAU,WACR,IAAMwB,EAAMC,YAAOH,EAAOrB,SAC1B,GAAKO,EAAL,CAEAY,EAAKM,MACH,SAACC,EAAGC,GAAJ,OACEA,EAAEC,SAASC,MAAMC,IAAOV,GAAQW,OAAO,WACvCL,EAAEE,SAASC,MAAMC,IAAOV,GAAQW,OAAO,cAE3C,IAAMC,EAASC,cACZC,aAAa,IACbC,OAAOhB,EAAKiB,KAAI,SAACC,EAAOC,GAAR,OAAkBA,MAClCC,MAAM,CAAC,EAAG,MAEPC,EAASC,cACZN,OAAO,CACN,EACAO,YACEvB,GACA,SAACL,GAAD,OAAWA,EAAMc,SAASC,MAAMC,IAAOV,GAAQW,OAAO,gBAGzDQ,MAAM,CAAC,EAAGhC,EAAWoC,QAGxBpB,EACGqB,UAAU,QACVzB,KAAKA,GAAM,SAACL,EAAOwB,GAAR,OAAkBxB,EAAM+B,WACnCC,MAAK,SAACC,GAAD,OACJA,EAAMC,OAAO,QAAQC,KAAK,KAAK,SAACnC,EAAOwB,GAAR,OAAkBN,EAAOM,SAEzDW,KAAK,OAAQ,WACbA,KAAK,QAAS,OACdA,KAAK,IAAK,GACVA,KAAK,SAAUjB,EAAOkB,aACtBC,aACAF,KAAK,SAAS,SAACnC,GAAD,OACb0B,EAAO1B,EAAMc,SAASC,MAAMC,IAAOV,GAAQW,OAAO,eAEnDkB,KAAK,KAAK,SAACnC,EAAOwB,GAAR,OAAkBN,EAAOM,MAGtCf,EACGqB,UAAU,UACVzB,KAAKA,GAAM,SAACL,EAAOwB,GAAR,OAAkBxB,EAAM+B,WACnCC,MAAK,SAACC,GAAD,OACJA,EACGC,OAAO,QACPC,KACC,KACA,SAACnC,EAAOwB,GAAR,OAAkBN,EAAOM,GAASN,EAAOkB,YAAc,EAAI,QAGhEE,MACC,SAACtC,GAAD,iBACMA,EAAM+B,QADZ,aAEI/B,EAAMc,SAASC,MAAMC,IAAOV,GAAQW,OAAO,WAF/C,QAKDkB,KAAK,QAAS,SACdA,KAAK,IAAK,IACVE,aACAF,KAAK,KAAK,SAACnC,EAAOwB,GAAR,OAAkBN,EAAOM,GAASN,EAAOkB,YAAc,EAAI,QACvE,CAAC/B,EAAMZ,EAAYa,IAGpB,qBAAKf,IAAKiB,EAAY+B,MAAO,CAAEC,aAAc,SAA7C,SACE,qBAAKjD,IAAKgB,OCvBDkC,MA/Cf,WACE,MAA0BjD,oBAAS,GAAnC,mBAAOkD,EAAP,KAAcC,EAAd,KAEA,EAA4BnD,mBAAS,YAArC,mBAAOc,EAAP,KAAesC,EAAf,KACMC,EAAM,MAEZ,EAAkCrD,qBAAlC,mBAAOsD,EAAP,KAAkBC,EAAlB,KA2BA,OAXAnE,GAAY,WACL8D,GAAsB,MAAbI,IAfG,MAAbA,EACFE,IACGC,IAAI,yDACJC,MAAK,SAACC,GACLJ,EAAaI,EAAI9C,MACjBuC,EAAUtC,GACVqC,GAAUD,MAEXU,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAEXV,GAAUD,GAMfC,GAAUD,IAERA,IACFE,EAAUtC,EAASuC,GACfvC,GAxBO,YAwBWqC,GAAUD,MAEjC,KAGD,gCACE,sBACA,qBAAKc,UAAU,aAAf,SACE,4DAEF,sBALF,UAMUxC,IAAOV,GAAQW,OAAO,UAC9B,sBACc,MAAb6B,GAAqB,cAAC,EAAD,CAAczC,KAAMyC,EAAWxC,OAAQA,QCrCpDmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.82f35bb9.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;","import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;","import React, { useRef, useEffect } from \"react\";\r\nimport { select, scaleBand, scaleLinear, max } from \"d3\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport moment from \"moment\";\r\n\r\nfunction Racingchart2({ data, mstime }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    if (!dimensions) return;\r\n\r\n    data.sort(\r\n      (a, b) =>\r\n        b.timeline.cases[moment(mstime).format(\"M/D/YY\")] -\r\n        a.timeline.cases[moment(mstime).format(\"M/D/YY\")]\r\n    );\r\n    const yScale = scaleBand()\r\n      .paddingInner(0.1)\r\n      .domain(data.map((value, index) => index))\r\n      .range([0, 5000]);\r\n\r\n    const xScale = scaleLinear()\r\n      .domain([\r\n        0,\r\n        max(\r\n          data,\r\n          (entry) => entry.timeline.cases[moment(mstime).format(\"M/D/YY\")]\r\n        ),\r\n      ])\r\n      .range([0, dimensions.width]);\r\n\r\n    // draw the bars\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(data, (entry, index) => entry.country)\r\n      .join((enter) =>\r\n        enter.append(\"rect\").attr(\"y\", (entry, index) => yScale(index))\r\n      )\r\n      .attr(\"fill\", \"#5FB1E7\")\r\n      .attr(\"class\", \"bar\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"height\", yScale.bandwidth())\r\n      .transition()\r\n      .attr(\"width\", (entry) =>\r\n        xScale(entry.timeline.cases[moment(mstime).format(\"M/D/YY\")])\r\n      )\r\n      .attr(\"y\", (entry, index) => yScale(index));\r\n\r\n    // draw the labels\r\n    svg\r\n      .selectAll(\".label\")\r\n      .data(data, (entry, index) => entry.country)\r\n      .join((enter) =>\r\n        enter\r\n          .append(\"text\")\r\n          .attr(\r\n            \"y\",\r\n            (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5\r\n          )\r\n      )\r\n      .text(\r\n        (entry) =>\r\n          ` ${entry.country} (${\r\n            entry.timeline.cases[moment(mstime).format(\"M/D/YY\")]\r\n          })`\r\n      )\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"x\", 10)\r\n      .transition()\r\n      .attr(\"y\", (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5);\r\n  }, [data, dimensions, mstime]);\r\n\r\n  return (\r\n    <div ref={wrapperRef} style={{ marginBottom: \"20rem\" }}>\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Racingchart2;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport useInterval from \"./useInterval\";\nimport axios from \"axios\";\nimport Racingchart2 from \"./racingchart2\";\nimport moment from \"moment\";\n\nfunction App() {\n  const [start, setStart] = useState(false);\n\n  const [mstime, setMsTime] = useState(1619629200000);\n  const day = 86400000;\n  const maxDay = 1619629200000 + 28 * day;\n  const [casesData, setCasesData] = useState();\n  const fetch = () => {\n    if (casesData == null) {\n      axios\n        .get(\"https://disease.sh/v3/covid-19/historical?lastdays=30\")\n        .then((res) => {\n          setCasesData(res.data);\n          setMsTime(mstime);\n          setStart(!start);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else setStart(!start);\n  };\n\n  useInterval(() => {\n    if (!start && casesData == null) {\n      fetch();\n      setStart(!start);\n    }\n    if (start) {\n      setMsTime(mstime + day);\n      if (mstime >= maxDay) setStart(!start);\n    }\n  }, 100);\n\n  return (\n    <div>\n      <p></p>\n      <div className=\"headertext\">\n        <b>Covid Global Cases by SGN</b>\n      </div>\n      <p></p>\n      Date : {moment(mstime).format(\"M/D/YY\")}\n      <p></p>\n      {casesData != null && <Racingchart2 data={casesData} mstime={mstime} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}