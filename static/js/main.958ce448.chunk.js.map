{"version":3,"sources":["useInterval.js","useResizeObserver.js","racingchart2.js","App.js","reportWebVitals.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useResizeObserver","ref","useState","dimensions","setDimensions","observeTarget","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","Racingchart2","data","svgRef","wrapperRef","console","log","svg","select","mstime","sort","a","b","timeline","cases","moment","format","yScale","scaleBand","paddingInner","domain","map","value","index","range","height","xScale","scaleLinear","max","width","selectAll","country","join","enter","append","attr","bandwidth","transition","text","style","marginBottom","App","iteration","setIteration","start","date","setDate","testdata","setTestData","name","color","setData","randomIndex","array","Math","floor","length","random","className","onClick","axios","get","then","res","test","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.958ce448.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nfunction useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;","import { useEffect, useState } from \"react\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;","import React, { useRef, useEffect } from \"react\";\r\nimport { select, scaleBand, scaleLinear, max } from \"d3\";\r\nimport useResizeObserver from \"./useResizeObserver\";\r\nimport moment from \"moment\";\r\n\r\nfunction Racingchart2({ data }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n  console.log(data)\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    if (!dimensions) return;\r\n\r\n\r\n    var mstime = 1619456400000\r\n    data.sort((a, b) => b.timeline.cases[moment(mstime).format(\"M/D/YY\")] - a.timeline.cases[moment(mstime).format(\"M/D/YY\")]);\r\n    const yScale = scaleBand()\r\n      .paddingInner(0.1)\r\n      .domain(data.map((value, index) => index)) \r\n      .range([0, dimensions.height]); \r\n\r\n    const xScale = scaleLinear()\r\n      .domain([0, max(data, entry => entry.timeline.cases[moment(mstime).format(\"M/D/YY\")])]) \r\n      .range([0, dimensions.width]); \r\n\r\n    // draw the bars\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(data, (entry, index) => entry.country)\r\n      .join(enter =>\r\n        enter.append(\"rect\").attr(\"y\", (entry, index) => yScale(index))\r\n      )\r\n      .attr(\"fill\", \"#23F324\")\r\n      .attr(\"class\", \"bar\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"height\", yScale.bandwidth())\r\n      .transition()\r\n      .attr(\"width\", entry => xScale(entry.timeline.cases[moment(mstime).format(\"M/D/YY\")]))\r\n      .attr(\"y\", (entry, index) => yScale(index));\r\n\r\n    // draw the labels\r\n    svg\r\n      .selectAll(\".label\")\r\n      .data(data, (entry, index) => entry.country)\r\n      .join(enter =>\r\n        enter\r\n          .append(\"text\")\r\n          .attr(\r\n            \"y\",\r\n            (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5\r\n          )\r\n      )\r\n      .text(entry => ` ${entry.country} (${entry.timeline.cases[moment(mstime).format(\"M/D/YY\")]})`)\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"x\", 10)\r\n      .transition()\r\n      .attr(\"y\", (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5);\r\n  }, [data, dimensions]);\r\n\r\n  return (\r\n    <div ref={wrapperRef} style={{ marginBottom: \"20rem\" }}>\r\n      <svg ref={svgRef}></svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Racingchart2;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport useInterval from \"./useInterval\";\nimport axios from \"axios\";\nimport Racingchart2 from \"./racingchart2\";\nimport moment from \"moment\";\n\nconst getRandomIndex = (array) => {\n  return Math.floor(array.length * Math.random());\n};\n\nfunction App() {\n  const [iteration, setIteration] = useState(0);\n  const [start, setStart] = useState(false);\n  const [date, setDate] = useState();\n\n  var i = 21;\n  var mstime = 1619456400000;\n  const day = 86400000;\n\n  const [testdata, setTestData] = useState();\n  const fetch = () => {  if (testdata == null) {\n    axios\n      .get(\"https://disease.sh/v3/covid-19/historical?lastdays=30\")\n      .then((res) => {\n        setTestData(res.data);\n        var test = moment(1619370000000 + day).format(\"M/D/YY\");\n        test = moment(1619456400000).format(\"M/D/YY\");\n        setDate(test)\n      });\n  } else \n    console.log(testdata);\n  }\n  const [data, setData] = useState([\n    {\n      name: \"alpha\",\n      value: 10,\n      color: \"#f4efd3\",\n    },\n    {\n      name: \"beta\",\n      value: 15,\n      color: \"#cccccc\",\n    },\n    {\n      name: \"charlie\",\n      value: 20,\n      color: \"#c2b0c9\",\n    },\n    {\n      name: \"delta\",\n      value: 25,\n      color: \"#9656a1\",\n    },\n    {\n      name: \"echo\",\n      value: 30,\n      color: \"#fa697c\",\n    },\n    {\n      name: \"foxtrot\",\n      value: 35,\n      color: \"#fcc169\",\n    },\n  ]);\n\n  useInterval(() => {\n    if (start) {\n      const randomIndex = getRandomIndex(data);\n      setData(\n        data.map((entry, index) =>\n          index === randomIndex\n            ? {\n                ...entry,\n                value: entry.value + 10,\n              }\n            : entry\n        )\n      );\n      setIteration(iteration + 1);\n    }\n  }, 100);\n\n  return (\n    <div>\n      <p></p>\n      <div className=\"headertext\">\n        <b>Covid Global Cases by SGN</b>\n      </div>\n      <p></p>\n      Date : {date}\n      <p></p>\n      {/* <RacingBarChart data={data} /> */}\n      <button onClick={fetch}>{start ? \"Stop the race\" : \"Fetch Data!\"}</button>\n      { testdata != null && <Racingchart2 data={testdata} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}